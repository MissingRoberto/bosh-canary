#!/bin/bash

set -e

# template_prefix="canary"


while getopts "dpn:i:s:" opt; do
  case $opt in
    i)
      infrastructure=$OPTARG
      ;;
    n)
      directory=$OPTARG
      ;;
    s)
      STEMCELL_OS=$OPTARG
      ;;
    d)
      deployment=dev
      ;;
    p)
      deployment=prod
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

if [[ -z "$infrastructure" ]]; then
    echo "ERROR: No infrastructure specified"
    exit 1
elif [[ -z "$directory" ]]; then
    echo "ERROR: No deployment specified"
    exit 1
fi

STEMCELL_OS=${STEMCELL_OS:-ubuntu}
STEMCELL=roberto.stemcell

echo "INFO: Creating manifest for deployment '$directory' in $infrastructure infrastructure with stemcell based on '$STEMCELL_OS'"


if [ "$infrastructure" != "aws-ec2" ] && \
    [ "$infrastructure" != "openstack-nova" ] && \
    [ "$infrastructure" != "warden" ] &&
    [ "$infrastructure" != "example" ] ; then
  echo "usage: ./make_manifest <example|warden|aws-ec2|openstack-nova>"
  exit 1
fi


BOSH_STATUS=$(bosh status)
DIRECTOR_UUID=$(echo "$BOSH_STATUS" | grep UUID | awk '{print $2}')
DIRECTOR_CPI=$(echo "$BOSH_STATUS" | grep CPI | awk '{print $2}')
DIRECTOR_NAME=$(echo "$BOSH_STATUS" | grep Name | sed -e 's/\s*Name\s*//')
# NAME=${NAME:-$template_prefix-$infrastructure}


if [[ $DIRECTOR_NAME = "Bosh Lite Director" ]]; then
  if [[ $infrastructure != "warden" ]]; then
    echo "Not targeting bosh-lite with warden CPI. Please use 'bosh target' before running this script."
    exit 1
  fi
fi

if [[ $infrastructure = "aws-ec2" ]]; then
  if [[ $DIRECTOR_CPI != "aws" ]]; then
    echo "Not targeting an AWS BOSH. Please use 'bosh target' before running this script."
    exit 1
  fi
fi

if [[ $infrastructure = "openstack-nova" ]]; then
  if [[ $DIRECTOR_CPI != "openstack" ]]; then
    echo "Not targeting an OpenStack BOSH. Please use 'bosh target' before running this script."
    exit 1
  fi
fi

# Build example manifest with warden templates
if [[ $infrastructure = "example" ]]; then
  infrastructure="warden"
fi

function latest_uploaded_stemcell {
  bosh stemcells | grep bosh | grep $STEMCELL_OS | awk -F'|' '{ print $2, $3 }' | sort -nr -k2 | head -n1 | awk '{ print $1 }'
}

# STEMCELL=${STEMCELL:-$(latest_uploaded_stemcell)}
# if [[ "${STEMCELL}X" == "X" ]]; then
#   echo
#   echo "Uploading latest $DIRECTOR_CPI/$STEMCELL_OS stemcell..."

#   echo "bosh public stemcells --full | grep $DIRECTOR_CPI | grep $STEMCELL_OS | sort -nr | head -n1 | awk '{ print $4 }'"
#   STEMCELL_URL=$(bosh public stemcells --full | grep $infrastructure | grep $STEMCELL_OS | sort -nr | head -n1 | awk '{ print $4 }')

#   echo "bosh upload stemcell $STEMCELL_URL"
#   bosh upload stemcell $STEMCELL_URL
# fi
# STEMCELL=${STEMCELL:-$(latest_uploaded_stemcell)}

release=$(dirname $( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ) )
tmpdir=$release/tmp
templates=$release/deployments/spec/$directory
destination=$release/deployments/$deployment

mkdir -p $tmpdir

cp $templates/metadata.yml $tmpdir/metadata-with-uuid.yml
echo $DIRECTOR_NAME $DIRECTOR_CPI $DIRECTOR_UUID $STEMCELL
perl -pi -e "s/PLACEHOLDER-DIRECTOR-UUID/$DIRECTOR_UUID/g" $tmpdir/metadata-with-uuid.yml
perl -pi -e "s/STEMCELL/$STEMCELL/g" $tmpdir/metadata-with-uuid.yml

cat $templates/jobs.yml >  $tmpdir/jobs-pools.yml
cat $templates/resource_pools.yml  >>  $tmpdir/jobs-pools.yml

spiff merge \
  $templates/deployment.yml \
  $templates/infrastructure-${infrastructure}/compilation.yml \
  $templates/properties.yml \
  $templates/infrastructure-${infrastructure}/networks.yml \
  $tmpdir/jobs-pools.yml \
  $templates/infrastructure-${infrastructure}/jobs_network.yml \
  $templates/infrastructure-${infrastructure}/resource_pools.yml \
  $templates/updates.yml \
  $tmpdir/metadata-with-uuid.yml > $destination/$directory.yml


rm -r $tmpdir/*
#bosh deployment $tmpdir/$deployment-manifest.yml
#bosh status